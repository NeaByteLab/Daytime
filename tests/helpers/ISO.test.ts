import { assertEquals } from '@std/assert'
import daytime from '@neabyte/daytime'

Deno.test('ISO Week: isoWeek - should return correct ISO week number', () => {
  const date1 = daytime('2026-01-01')
  assertEquals(date1.isoWeek(), 1)
  const date2 = daytime('2026-01-04')
  assertEquals(date2.isoWeek(), 1)
  const date3 = daytime('2026-01-05')
  assertEquals(date3.isoWeek(), 2)
  const date4 = daytime('2025-01-01')
  assertEquals(date4.isoWeek(), 1)
})

Deno.test('ISO Week: isoWeekYear - should return correct ISO week year', () => {
  const date1 = daytime('2026-01-01')
  assertEquals(date1.isoWeekYear(), 2026)
  const date2 = daytime('2025-12-31')
  assertEquals(date2.isoWeekYear(), 2026)
  const date3 = daytime('2025-01-01')
  assertEquals(date3.isoWeekYear(), 2025)
})

Deno.test('ISO Week: isoWeekday - should return correct ISO weekday (Monday=1, Sunday=7)', () => {
  const monday = daytime('2026-01-05')
  assertEquals(monday.isoWeekday(), 1)
  const tuesday = daytime('2026-01-06')
  assertEquals(tuesday.isoWeekday(), 2)
  const wednesday = daytime('2025-12-31')
  assertEquals(wednesday.isoWeekday(), 3)
  const thursday = daytime('2026-01-01')
  assertEquals(thursday.isoWeekday(), 4)
  const friday = daytime('2026-01-02')
  assertEquals(friday.isoWeekday(), 5)
  const saturday = daytime('2026-01-03')
  assertEquals(saturday.isoWeekday(), 6)
  const sunday = daytime('2026-01-04')
  assertEquals(sunday.isoWeekday(), 7)
})

Deno.test('ISO Week: isoWeeksInYear - should return correct number of ISO weeks in year', () => {
  const date1 = daytime('2026-01-01')
  assertEquals(date1.isoWeeksInYear(), 54)
  const date2 = daytime('2025-01-01')
  assertEquals(date2.isoWeeksInYear(), 53)
  const date3 = daytime('2026-12-30')
  assertEquals(date3.isoWeeksInYear(), 54)
  const date4 = daytime('2025-12-28')
  assertEquals(date4.isoWeeksInYear(), 53)
})

Deno.test('ISO Week: startOf isoWeek - should return start of ISO week (Monday)', () => {
  const thursday = daytime('2026-01-01T14:30:00')
  const startOfWeek = thursday.startOf('isoWeek')
  assertEquals(startOfWeek.isoWeekday(), 1)
  assertEquals(startOfWeek.format('YYYY-MM-DD'), '2025-12-29')
  assertEquals(startOfWeek.get('hour'), 0)
  assertEquals(startOfWeek.get('minute'), 0)
  assertEquals(startOfWeek.get('second'), 0)
  assertEquals(startOfWeek.get('millisecond'), 0)
  const sunday = daytime('2026-01-04T14:30:00')
  const startOfWeekFromSunday = sunday.startOf('isoWeek')
  assertEquals(startOfWeekFromSunday.isoWeekday(), 1)
  assertEquals(startOfWeekFromSunday.format('YYYY-MM-DD'), '2025-12-29')
})

Deno.test('ISO Week: endOf isoWeek - should return end of ISO week (Sunday)', () => {
  const thursday = daytime('2026-01-01T14:30:00')
  const endOfWeek = thursday.endOf('isoWeek')
  assertEquals(endOfWeek.isoWeekday(), 7)
  assertEquals(endOfWeek.format('YYYY-MM-DD'), '2026-01-04')
  assertEquals(endOfWeek.get('hour'), 23)
  assertEquals(endOfWeek.get('minute'), 59)
  assertEquals(endOfWeek.get('second'), 59)
  assertEquals(endOfWeek.get('millisecond'), 999)
  const monday = daytime('2026-01-05T14:30:00')
  const endOfWeekFromMonday = monday.endOf('isoWeek')
  assertEquals(endOfWeekFromMonday.isoWeekday(), 7)
  assertEquals(endOfWeekFromMonday.format('YYYY-MM-DD'), '2026-01-11')
})

Deno.test('ISO Week: should handle year boundaries correctly', () => {
  const dec28 = daytime('2025-12-28')
  assertEquals(dec28.isoWeek(), 52)
  assertEquals(dec28.isoWeekYear(), 2025)
  const dec29 = daytime('2025-12-29')
  assertEquals(dec29.isoWeek(), 1)
  assertEquals(dec29.isoWeekYear(), 2026)
  const jan1 = daytime('2026-01-01')
  assertEquals(jan1.isoWeek(), 1)
  assertEquals(jan1.isoWeekYear(), 2026)
})

Deno.test('ISO Week: should work with leap years', () => {
  const leapYear = daytime('2028-02-29')
  assertEquals(leapYear.isoWeekYear(), 2028)
  assertEquals(leapYear.isoWeekday(), 2)
  assertEquals(leapYear.isoWeek(), 9)
})

Deno.test('ISO Week: should be immutable', () => {
  const date = daytime('2026-01-01')
  const originalISOWeek = date.isoWeek()
  date.startOf('isoWeek')
  assertEquals(date.isoWeek(), originalISOWeek)
  const date2 = daytime('2026-01-01')
  const originalISOWeekday = date2.isoWeekday()
  date2.endOf('isoWeek')
  assertEquals(date2.isoWeekday(), originalISOWeekday)
})

Deno.test('ISO Week: should work with chaining', () => {
  const result = daytime('2026-01-01')
    .startOf('isoWeek')
    .add(3, 'days')
    .endOf('isoWeek')
    .isoWeekday()
  assertEquals(result, 7)
})

Deno.test('ISO Week: isoWeekYear can differ from calendar year', () => {
  const lateDec = daytime('2025-12-31')
  assertEquals(lateDec.get('year'), 2025)
  assertEquals(lateDec.isoWeekYear(), 2026)
  const earlyJan = daytime('2026-01-01')
  assertEquals(earlyJan.get('year'), 2026)
  assertEquals(earlyJan.isoWeekYear(), 2026)
  const jan6 = daytime('2026-01-06')
  assertEquals(jan6.get('year'), 2026)
  assertEquals(jan6.isoWeekYear(), 2026)
})

Deno.test('ISO Week: isoWeeksInYear should use isoWeekYear', () => {
  const lateDec = daytime('2025-12-31')
  const weeks = lateDec.isoWeeksInYear()
  assertEquals(weeks, 53)
  const earlyJan = daytime('2026-01-01')
  const weeksEarlyJan = earlyJan.isoWeeksInYear()
  assertEquals(weeksEarlyJan, 54)
})

Deno.test('ISO Week: isoWeek - should handle year when Jan 1 is not Thursday', () => {
  const date = new Date('2025-01-01')
  const week = daytime(date).isoWeek()
  assertEquals(typeof week, 'number')
  assertEquals(week, 1)
})

Deno.test('ISO Week: isoWeekday - should handle all weekdays', () => {
  const monday = daytime('2026-01-05')
  assertEquals(monday.isoWeekday(), 1)
  const tuesday = daytime('2026-01-06')
  assertEquals(tuesday.isoWeekday(), 2)
  const wednesday = daytime('2025-12-31')
  assertEquals(wednesday.isoWeekday(), 3)
  const thursday = daytime('2026-01-01')
  assertEquals(thursday.isoWeekday(), 4)
  const friday = daytime('2026-01-02')
  assertEquals(friday.isoWeekday(), 5)
  const saturday = daytime('2026-01-03')
  assertEquals(saturday.isoWeekday(), 6)
  const sunday = daytime('2026-01-04')
  assertEquals(sunday.isoWeekday(), 7)
})

Deno.test('ISO Week: isoWeek - should handle years when Jan 1 is Thursday', () => {
  const thursdayJan1 = daytime('2026-01-01')
  assertEquals(thursdayJan1.isoWeek(), 1)
  assertEquals(thursdayJan1.isoWeekYear(), 2026)
})

Deno.test('ISO Week: isoWeek - should handle years when Jan 1 is not Thursday', () => {
  const wednesdayJan1 = daytime('2025-01-01')
  assertEquals(wednesdayJan1.isoWeek(), 1)
  const fridayJan1 = daytime('2027-01-01')
  assertEquals(fridayJan1.isoWeek(), 53)
  assertEquals(fridayJan1.isoWeekYear(), 2026)
})

Deno.test('ISO Week: isoWeek - should handle different days of week for Jan 1', () => {
  const wednesdayJan1 = daytime('2025-01-01')
  assertEquals(wednesdayJan1.isoWeek(), 1)
  const thursdayJan1 = daytime('2026-01-01')
  assertEquals(thursdayJan1.isoWeek(), 1)
  const fridayJan1 = daytime('2027-01-01')
  assertEquals(fridayJan1.isoWeek(), 53)
  assertEquals(fridayJan1.isoWeekYear(), 2026)
  const saturdayJan1 = daytime('2028-01-01')
  assertEquals(saturdayJan1.isoWeek(), 52)
  assertEquals(saturdayJan1.isoWeekYear(), 2027)
  const sundayJan1 = daytime('2029-01-01')
  assertEquals(sundayJan1.isoWeek(), 1)
  assertEquals(sundayJan1.isoWeekYear(), 2029)
})

Deno.test('ISO Week: isoWeekday - should handle Sunday (edge case)', () => {
  const sunday = daytime('2026-01-04')
  assertEquals(sunday.isoWeekday(), 7)
  const sunday2 = daytime('2026-01-11')
  assertEquals(sunday2.isoWeekday(), 7)
})

Deno.test('ISO Week: isoWeekday - should handle all non-Sunday days', () => {
  const monday = daytime('2026-01-05')
  assertEquals(monday.isoWeekday(), 1)
  const tuesday = daytime('2026-01-06')
  assertEquals(tuesday.isoWeekday(), 2)
  const wednesday = daytime('2025-12-31')
  assertEquals(wednesday.isoWeekday(), 3)
  const thursday = daytime('2026-01-01')
  assertEquals(thursday.isoWeekday(), 4)
  const friday = daytime('2026-01-02')
  assertEquals(friday.isoWeekday(), 5)
  const saturday = daytime('2026-01-03')
  assertEquals(saturday.isoWeekday(), 6)
})
